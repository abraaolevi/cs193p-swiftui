MVVM (Model-View-ViewModel)

Declarative (SwiftUI) <> Imperative (UIKit)

Model (`struct`)
- UI Independent 
- Data + Logic
- The Truth

View
- Reflects the Model
- Stateless
- Declared
- Reactive

ViewModel 
- Binds View to Model
- Interpreter
- Processes Intent

Model -> notices changes -> ViewModel -> publishes "something changed" -> View

View -> calls Intent function -> ViewModel -> modifies the Model -> Model

---

Types

struct
class
protocol
Generics
enum
function

struct                                  class
Value type                              Reference type
Copied when passed or assigned          Passed around via pointers
Copy on write                           Automatically reference counted
Function programming                    Object-oriented programming
No inheritance                          Inheritance (single)
"Free" init initializes ALL vars        "Free" init initializes NO vars
Mutability must be explicitly stated    Always mutable
Your "go to" data structure             Used in specific circumstances


Generics (Type parameter)
- Sometimes we just "don't care" type
- Ex: Arrays

---

```swift
class EmojiMemoryGame {
    private(set) var model: MemoryGame<String>
}
```

`private(set)` means that `model` property is read-only for who are using the class and only the `EmojiMemoryGame` can change it. It is a middle between `public` and `private`.





