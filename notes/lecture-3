Struct

- In a `struct` always a method changes itself, the method need `mutating` keyword: `mutating func ...`

---

Reactivity

- A `ObservableObject` always need to be a _class_ (viewModel)
- Properties to be observed in a _class_ need to have the wrapper `@Published` in front of declaration: `@Published private var model: ....`
- To bind to the view, the viewModel (or object to be observed) need to have the wrapper `@ObservedObject`: `@ObservedObject var viewModel: ...`

So every time the the thing that are observed changes, the viewModel send an "event" for a view to reflect the current state of object that is observed.

Implicitly the wrapper `@Published` calls the `objectWillChange.send()` from `ObservableObject`. You can call manually `objectWillChange.send()` before any change perform if you like, but is much more convenient to use the `@Published` wrapper.

---

View

For custom sizes, we can use the View `GeometryReader`